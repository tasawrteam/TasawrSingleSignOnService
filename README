# Welcome to the Tasawr Single Sign-On Service wiki!

How to integrate tasawr SSO service with your application. if you are reading this you can keep reading the rest of the texts or you can stop here.
since the next steps would require your programming background.

TSSO is not programming language dependent, it can be integrated in any web technology platform. for better understanding we will be demonstrating our code in ruby. you can check it out online [[here|http://tasawrsso-example.heroku.com/]] .

## How to kick start with Tasawr SSO service ?

TSSO service is hosted under [[http://connect.tasawr.info/]] (which is allowed for any kind of experiment since it is the test server).
Before you start you ensure you know about the following library usages using your preferred programming language -

* Fetch content from remote http server keeping proper request header and cookies. (ie. you have to request our connect.tasawr.info server to fetch the currently logged in user. to keep the same context, you have to request on the server with the existing cookies. this cookies will be provided by our single sign-on check up javascript)

* JSON response parser, you will need JSON decoder so you can read user data from web service response.

## What to do first ?

On you web site, add "login" url where you link to "http://connect.tasawr.info?redirect_to=<your desire returning path>"

## What would be next ?

If your user hasn't yet logged in, render this piece of javascript -

```html
    <script type="text/javascript" src="http://servicedev1.net/sessions/check?format=js"></script>
    <script type="text/javascript">
      TasawrAuth.init({
        ifLoggedIn: '/autologin'
      })
    </script>
```
remember, you have to replace "/autologin" path with your suitable script path so you can take action when on other side (connect.tasawr.info side) user has session.

## How to fetch session user ?

When user has an active session or user has been redirected after logged in, will redirect you to after login url. you will have the following parameters attached while you returned back -

* "sessionKey" - this is because of creating session context
* "sessionId" - original cookie content which is used to be session id for connect tasawr server.

After being ensure about these two parameters, you open up your http content fetching library. i've illustrated a ruby code -

```ruby
     url = URI.parse('http://connect.tasawr.info/sessions/session_user')
    connection = Net::HTTP.new(url.host, url.port)
    response = connection.get(url.path, {'Cookie' => "#{session_key}=#{session_id}"})
```

ensure you are using [[http://connect.tasawr.info/sessions/session_user]]

you will be provided session user with in JSON encoded text, you just parse the response and try to recognize the existing user or automatically create new user. after completing all required tasks now create a session at your end, so your service will stop embedding javascript.

that's it :)_)
